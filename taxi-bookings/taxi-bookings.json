{
  "openapi": "3.0.1",
  "info": {
    "title": "Taxi API",
    "description": "Alpha version of the TSP connector for taxis used to connect to SkedGo's platform.\n Returns information in GeoJSON",
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.0.0",
    "x-logo": {
      "url": "https://developer.tripgo.com/img/tripgo-api-logo-color.svg"
    }
  },
  "paths": {
    "/account/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "get account",
        "description": "get account info from transport operator",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingOperationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create account",
        "description": "Create account on transport operator",
        "operationId": "updateLegStatus",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{bookingID}": {
      "get": {
        "tags": [
          "Booking-TO"
        ],
        "summary": "Get Booking",
        "description": "Get Booking with its current status",
        "operationId": "book",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/estimate/price": {
      "post": {
        "tags": [
          "Estimates"
        ],
        "summary": "Estimated price for products",
        "description": "An estimated price range for each product offered at a given location.",
        "operationId": "estimatePrice",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceEstimateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of price estimates for each product available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceEstimateList"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/estimate/time": {
      "post": {
        "tags": [
          "Estimates"
        ],
        "summary": "ETAs for products",
        "description": "ETAs for all products offered at a given location, with the responses expressed in seconds",
        "operationId": "estimateTime",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Detailed information on the bike/car systems in the requested search area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEstimateList"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/planning/offers": {
      "post": {
        "tags": [
          "Booking-TO"
        ],
        "summary": "create booking offers",
        "description": "Retrieve booking options",
        "operationId": "createBookingOffers",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanningRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Planning response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Planning"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "tags": [
          "Booking-TO"
        ],
        "summary": "create booking request",
        "description": "Initiates the booking",
        "operationId": "createBooking",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{bookingID}/events": {
      "post": {
        "tags": [
          "Booking-MP",
          "Booking-TO"
        ],
        "summary": "Update booking status",
        "description": "Updates a booking status, either by confirming or cancelling it",
        "operationId": "updateBookingStatus_1",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingOperationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingOutput"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    },
    "/legs/{legID}/events": {
      "post": {
        "tags": [
          "Booking-MP"
        ],
        "summary": "Update leg status",
        "description": "Updates a leg status",
        "operationId": "updateLegStatus_1",
        "parameters": [
          {
            "name": "x-access_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "legID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegOperationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leg response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegOutput"
                }
              }
            }
          },
          "403": {
            "description": "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          }
        }
      },
      "SharedProperties": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "model of the asset"
          },
          "brand": {
            "type": "string",
            "description": "brand of the asset"
          },
          "colour": {
            "type": "string",
            "description": "colour of the asset"
          }
        },
        "description": "what kind of asset is this? Classify it, give the aspects. Most aspects are optional and should be used when applicable."
      },
      "Customer": {
        "required": [
          "email",
          "givenName",
          "id",
          "phone",
          "referenceNumber",
          "surname"
        ],
        "type": "object",
        "properties": {
          "isValidated": {
            "type": "boolean",
            "description": "Whether this traveler's identity and properties have been verified by the MaaS provider"
          },
          "age": {
            "type": "integer",
            "description": "Age of the traveler, may be approximate",
            "format": "int32"
          },
          "referenceNumber": {
            "type": "string",
            "description": "reference number of the traveler. This number could be used to refer to in the planning result (Currently used for device id)"
          },
          "requirements": {
            "$ref": "#/components/schemas/Requirements"
          },
          "id": {
            "type": "string",
            "description": "The identifier MaaS uses to identify the customer"
          },
          "givenName": {
            "type": "string",
            "description": "customer given name"
          },
          "surname": {
            "type": "string",
            "description": "customer surname"
          },
          "phone": {
            "type": "string",
            "description": "customer phone"
          },
          "email": {
            "type": "string",
            "description": "customer email"
          }
        },
        "description": "The user that wants to make this booking"
      },
      "BookingOperationInput": {
        "required": [
          "operation"
        ],
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "booking operation",
            "enum": [
              "CANCEL",
              "EXPIRE",
              "DENY",
              "COMMIT"
            ]
          }
        }
      },
      "TimeEstimateList": {
        "required": [
          "timeEstimates"
        ],
        "type": "object",
        "properties": {
          "timeEstimates": {
            "type": "array",
            "description": "List of time estimates",
            "items": {
              "$ref": "#/components/schemas/TimeEstimate"
            }
          }
        }
      },
      "Requirements": {
        "type": "object",
        "properties": {
          "abilities": {
            "type": "array",
            "description": "Requirements the users has ((dis)abilities, share [TRUE|FALSE], preferences [TBD])",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            }
          },
          "bringAlong": {
            "type": "array",
            "description": "Requirements the users has ((dis)abilities, share [TRUE|FALSE], preferences [TBD])",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            }
          }
        },
        "description": "Requirements the users has"
      },
      "BookingOutput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the TO to know this booking by"
          },
          "state": {
            "type": "string",
            "description": "Booking status",
            "enum": [
              "NEW",
              "PENDING",
              "REJECTED",
              "CONDITIONAL_CONFIRMED",
              "CONFIRMED",
              "CANCELLED",
              "STARTED",
              "FINISHED",
              "COMMIT"
            ]
          }
        }
      },
      "TimeEstimate": {
        "required": [
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product identifier"
          },
          "estimate": {
            "type": "integer",
            "description": "ETA for the product (in seconds). Always show estimate in minutes",
            "format": "int32"
          }
        },
        "description": "List of time estimates"
      },
      "BookingRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the TO to know this booking by"
          },
          "from": {
            "$ref": "#/components/schemas/Location"
          },
          "to": {
            "$ref": "#/components/schemas/Location"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "pickupTime": {
            "type": "string",
            "description": "ISO-8601 formatted date. Pick up time"
          },
          "note": {
            "type": "string",
            "description": "Booking note"
          },
          "callbackUrl": {
            "type": "string",
            "description": "base callback/webhook url to send updates to (see /bookings/{bookingID}/events and /legs/{legID}/events)"
          }
        }
      },
      "PriceEstimateList": {
        "required": [
          "priceEstimates"
        ],
        "type": "object",
        "properties": {
          "priceEstimates": {
            "type": "array",
            "description": "List of price estimates",
            "items": {
              "$ref": "#/components/schemas/PriceEstimate"
            }
          }
        }
      },
      "LegOperationInput": {
        "required": [
          "event"
        ],
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "writeOnly": true,
            "enum": [
              "PREPARE",
              "SET_IN_USE",
              "PAUSE",
              "FINISH",
              "TIME_POSTPONE"
            ]
          },
          "event": {
            "type": "string",
            "description": "event operation",
            "enum": [
              "PREPARE",
              "SET_IN_USE",
              "PAUSE",
              "FINISH",
              "TIME_POSTPONE"
            ]
          },
          "time": {
            "type": "string",
            "description": "ISO-8601 formatted date. New pick up time"
          }
        }
      },
      "PlanningRequest": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Location"
          },
          "to": {
            "$ref": "#/components/schemas/Location"
          },
          "departureTime": {
            "type": "string",
            "description": "ISO-8601 formatted date. Departure time"
          },
          "arrivalTime": {
            "type": "string",
            "description": "ISO-8601 formatted date. Arrival time"
          },
          "nrOfTravelers": {
            "type": "integer",
            "description": "The number of people that intend to travel",
            "format": "int32"
          },
          "travelers": {
            "type": "array",
            "description": "Extra information about the people that intend to travel if relevant, length must be less than or equal to nrOftravelers",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "extraInfo": {
            "$ref": "#/components/schemas/ExtraInfo"
          }
        }
      },
      "AccountInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          }
        }
      },
      "Booking": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the TO to know this booking by"
          },
          "state": {
            "type": "string",
            "description": "Booking status",
            "enum": [
              "NEW",
              "PENDING",
              "REJECTED",
              "CONDITIONAL_CONFIRMED",
              "CONFIRMED",
              "CANCELLED",
              "STARTED",
              "FINISHED",
              "COMMIT"
            ]
          },
          "from": {
            "$ref": "#/components/schemas/Location"
          },
          "to": {
            "$ref": "#/components/schemas/Location"
          },
          "departureTime": {
            "type": "string",
            "description": "ISO-8601 formatted date. Departure time"
          },
          "arrivalTime": {
            "type": "string",
            "description": "ISO-8601 formatted date. Arrival time"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "legs": {
            "type": "array",
            "description": "The legs of this booking, generally just one for simple legs, in order of how they will be travelled",
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          },
          "extraInfo": {
            "$ref": "#/components/schemas/ExtraInfo"
          },
          "callbackUrl": {
            "type": "string",
            "description": "base callback/webhook url to send updates to (see /bookings/{bookingID}/events and /legs/{legID}/events)"
          },
          "pricing": {
            "$ref": "#/components/schemas/Fare"
          }
        }
      },
      "ExtraInfo": {
        "type": "object",
        "properties": {
          "driverFirstName": {
            "type": "string",
            "description": "Driver first name"
          },
          "serviceId": {
            "type": "string",
            "description": "Service id, if known"
          },
          "returnTripPickUpTime": {
            "type": "string",
            "description": "ISO-8601 formatted date. Pick up time of the return trip."
          }
        },
        "description": "Arbitrary information that a TO can add"
      },
      "Scale": {
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "METER",
              "KM",
              "MILE",
              "MINUTE",
              "HOUR",
              "WEEKDAY"
            ]
          },
          "proportional": {
            "type": "boolean"
          }
        }
      },
      "FarePart": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of this pricing part"
          },
          "currencyCode": {
            "type": "string"
          },
          "taxRate": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOKING_FEE",
              "FIXED",
              "FLEX",
              "MAX",
              "MIN"
            ]
          },
          "unitType": {
            "type": "string",
            "enum": [
              "METER",
              "KM",
              "MILE",
              "SECOND",
              "MINUTE",
              "HOUR",
              "DURATION_IN_SECONDS",
              "DURATION_IN_MINUTES",
              "DURATION_IN_HOURS"
            ]
          },
          "units": {
            "type": "number",
            "description": "the number of km, seconds etc in the `per` part. In the first example of the description this should be 2.0",
            "format": "float"
          },
          "amount": {
            "type": "number",
            "format": "float"
          },
          "scales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scale"
            }
          },
          "zoneIds": {
            "type": "array",
            "description": "the zone/s that this farePart will be applied to. If missing this field, by default it's assumed that it will be applied to all the coverage (all the zones)",
            "items": {
              "type": "string",
              "description": "the zone/s that this farePart will be applied to. If missing this field, by default it's assumed that it will be applied to all the coverage (all the zones)"
            }
          }
        },
        "description": "this describes a part of the fare (or discount).It contains a for instance the startup costs (fixed) or the flex part (e.g. 1.25 EUR per 2.0 MILES).The amount is tax included. In case of discounts, the values are negative.With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts.The `scale` properties create the ability to communicate scales(e.g. the first 4 kilometers you've to pay EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer)."
      },
      "Fare": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "v1: original implementation - v2: using BOOKING_FEE instead of FIXED for flag fall, and FIXED in localCost (satapp)"
          },
          "estimated": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "waitingMaxSpeed": {
            "type": "integer",
            "description": "Wait time charged while the vehicle is stopped or slowed to less than X KM per hour",
            "format": "int32"
          },
          "parts": {
            "type": "array",
            "description": "this describes a part of the fare (or discount).It contains a for instance the startup costs (fixed) or the flex part (e.g. 1.25 EUR per 2.0 MILES).The amount is tax included. In case of discounts, the values are negative.With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts.The `scale` properties create the ability to communicate scales(e.g. the first 4 kilometers you've to pay EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).",
            "items": {
              "$ref": "#/components/schemas/FarePart"
            }
          },
          "type": {
            "type": "string",
            "description": "type of fare, can be single_ride or multiple_rides"
          }
        },
        "description": "the total fare is the sum of all parts, except for the 'MAX' farePart. This one describes the maximum price for the complete leg."
      },
      "Leg": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Location"
          },
          "to": {
            "$ref": "#/components/schemas/Location"
          },
          "departureTime": {
            "type": "string",
            "description": "The departure time of this leg"
          },
          "arrivalTime": {
            "type": "string",
            "description": "The intended arrival time at the to place"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the TO to know this booking by"
          },
          "state": {
            "type": "string",
            "description": "Booking status",
            "enum": [
              "NEW",
              "PENDING",
              "REJECTED",
              "CONDITIONAL_CONFIRMED",
              "CONFIRMED",
              "CANCELLED",
              "STARTED",
              "FINISHED",
              "COMMIT"
            ]
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetType"
          }
        },
        "description": "The legs of this booking, generally just one for simple legs, in order of how they will be travelled"
      },
      "LegOutput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the TO to know this leg by"
          },
          "state": {
            "type": "string",
            "description": "Leg status",
            "enum": [
              "NOT_STARTED",
              "PREPARING",
              "IN_USE",
              "FINISHED",
              "ISSUE_REPORTED",
              "CANCELLED"
            ]
          }
        }
      },
      "Requirement": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "type of requirement, see enum for details",
            "enum": [
              "HR",
              "HV",
              "AV",
              "AB",
              "AER",
              "K",
              "ZR",
              "RR"
            ]
          },
          "number": {
            "type": "string",
            "description": "code of requirement, second column"
          },
          "type": {
            "type": "string",
            "description": "conditionally extra information, third column"
          },
          "memo": {
            "type": "string",
            "description": "extra field for detailed information, not standardized"
          }
        },
        "description": "Requirements the users has ((dis)abilities, share [TRUE|FALSE], preferences [TBD])"
      },
      "AssetType": {
        "type": "object",
        "properties": {
          "assetClass": {
            "type": "string",
            "description": "These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.",
            "enum": [
              "AIR",
              "BUS",
              "TROLLEYBUS",
              "TRAM",
              "COACH",
              "RAIL",
              "INTERCITYRAIL",
              "URBANRAIL",
              "METRO",
              "WATER",
              "CABLEWAY",
              "FUNICULAR",
              "TAXI",
              "SELFDRIVE",
              "FOOT",
              "BICYCLE",
              "MOTORCYCLE",
              "CAR",
              "SHUTTLE",
              "OTHER",
              "PARKING",
              "MOPED",
              "STEP"
            ]
          },
          "assetSubClass": {
            "type": "string",
            "description": "a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi', 'segway'. This is mandatory when using 'OTHER' as class."
          },
          "sharedProperties": {
            "$ref": "#/components/schemas/SharedProperties"
          }
        },
        "description": "The asset type used in this leg as determined during booking"
      },
      "PriceEstimateInput": {
        "required": [
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Location"
          },
          "destination": {
            "$ref": "#/components/schemas/Location"
          },
          "depart": {
            "type": "string",
            "description": "ISO-8601 formatted date. Either this or `arrive` is required."
          },
          "arrive": {
            "type": "string",
            "description": "ISO-8601 formatted date. Either this or `depart` is required. If this is provided, `destination` is required. "
          },
          "passengers": {
            "type": "integer",
            "description": "Number of passengers",
            "format": "int32"
          },
          "wheelchair": {
            "type": "boolean",
            "description": "If a wheelchair-accessible vehicle is required"
          },
          "productId": {
            "type": "string",
            "description": "ID of the product if quotes should be limited to that."
          }
        }
      },
      "Planning": {
        "type": "object",
        "properties": {
          "validUntil": {
            "type": "string",
            "description": "The time until which the presented options are (likely) available"
          },
          "options": {
            "type": "array",
            "description": "Booking Options",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          }
        }
      },
      "PriceEstimate": {
        "required": [
          "currency",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product identifier"
          },
          "currency": {
            "type": "string",
            "description": "Unambiguous currency identifier, e.g., 'EUR' or 'USD'"
          },
          "estimate": {
            "type": "integer",
            "description": "estimate in cents (at least one of the 3 price estimates must be present)",
            "format": "int32"
          },
          "lowEstimate": {
            "type": "integer",
            "description": "lower estimate in cents (at least one of the 3 price estimates must be present)",
            "format": "int32"
          },
          "highEstimate": {
            "type": "integer",
            "description": "higher estimate in cents (at least one of the 3 price estimates must be present)",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "estimate duration of the trip, in seconds",
            "format": "int32"
          },
          "distance": {
            "type": "integer",
            "description": "estimate distance of the trip, in metres",
            "format": "int32"
          }
        },
        "description": "List of price estimates"
      },
      "Location": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "address": {
            "type": "string"
          }
        },
        "description": "The destination of this leg, using this asset type"
      }
    }
  }
}