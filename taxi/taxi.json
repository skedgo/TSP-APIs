{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Taxi API",
    "description" : "Alpha version of the TSP connector for taxis used to connect to SkedGo's platform.\nReturns information in GeoJSON",
    "license" : {
      "name" : "Apache 2.0 License",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version" : "1.0.0",
    "x-logo" : {
      "url" : "https://developer.tripgo.com/img/tripgo-api-logo-color.svg"
    }
  },
  "paths" : {
    "/account/{accountId}" : {
      "get" : {
        "tags" : [ "Booking-TO", "Account" ],
        "summary" : "get account",
        "description" : "get account info from transport operator",
        "operationId" : "getAccount",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BookingOperationInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/account" : {
      "post" : {
        "tags" : [ "Booking-TO", "Account" ],
        "summary" : "Create account",
        "description" : "Create account on transport operator",
        "operationId" : "updateLegStatus",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{bookingID}" : {
      "get" : {
        "tags" : [ "Booking-TO" ],
        "summary" : "Get Booking",
        "description" : "Get Booking with its current status",
        "operationId" : "book",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Booking response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Booking"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/estimate/price" : {
      "post" : {
        "tags" : [ "Estimates" ],
        "summary" : "Estimated price for products",
        "description" : "An estimated price range for each product offered at a given location.",
        "operationId" : "estimatePrice",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriceEstimateInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of price estimates for each product available",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriceEstimateList"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/estimate/time" : {
      "post" : {
        "tags" : [ "Estimates" ],
        "summary" : "ETAs for products",
        "description" : "ETAs for all products offered at a given location, with the responses expressed in seconds",
        "operationId" : "estimateTime",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Location"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Detailed information on the bike/car systems in the requested search area.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeEstimateList"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings" : {
      "post" : {
        "tags" : [ "Booking-TO" ],
        "summary" : "create booking request",
        "description" : "Initiates the booking",
        "operationId" : "createBooking",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BookingRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Booking response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingOutput"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{bookingID}/events" : {
      "post" : {
        "tags" : [ "Booking-MP", "Booking-TO" ],
        "summary" : "Update booking status",
        "description" : "Updates a booking status, either by confirming or cancelling it",
        "operationId" : "updateBookingStatus_1",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BookingOperationInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Booking response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingOutput"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/coverage" : {
      "get" : {
        "tags" : [ "Shared" ],
        "summary" : "All supported areas",
        "description" : "All the coverage areas that this operator serves, including optionally (but highly recommended!) information on products and prices. Information about each area is returned as a GeoJSON Feature, within a single GeoJSON FeatureCollection.",
        "operationId" : "coverage",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Detailed information on the coverage of the provider.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Coverage"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/provider" : {
      "get" : {
        "tags" : [ "Shared" ],
        "summary" : "Information of the provider",
        "description" : "Information about the provider, including company info and enabled endpoints",
        "operationId" : "provider",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Detailed information on provider",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Provider"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/config" : {
      "get" : {
        "tags" : [ "Shared" ],
        "summary" : "Endpoints available",
        "description" : "All the endpoints implemented, with their corresponding URL",
        "operationId" : "config",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of endpoints implemented.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EndpointsConfig"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    },
    "/legs/{legID}/events" : {
      "post" : {
        "tags" : [ "Booking-MP" ],
        "summary" : "Update leg status",
        "description" : "Updates a leg status",
        "operationId" : "updateLegStatus_1",
        "parameters" : [ {
          "name" : "x-access_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "legID",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LegOperationInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Leg response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegOutput"
                }
              }
            }
          },
          "403" : {
            "description" : "This method requires an `x-access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "BookingOption" : {
        "type" : "object",
        "properties" : {
          "website" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "deeplink" : {
            "type" : "string"
          },
          "bookingRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BookingRule"
            }
          }
        },
        "description" : "Options to book this particular product"
      },
      "CoverageArea" : {
        "required" : [ "geometry", "id", "properties", "type" ],
        "type" : "object",
        "properties" : {
          "geometry" : {
            "$ref" : "#/components/schemas/MultiPolygon"
          },
          "id" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/CoverageProperties"
          },
          "type" : {
            "type" : "string",
            "description" : "the feature type",
            "enum" : [ "Feature" ]
          }
        }
      },
      "Account" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "givenName" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          }
        }
      },
      "SharedProperties" : {
        "type" : "object",
        "properties" : {
          "model" : {
            "type" : "string",
            "description" : "model of the asset"
          },
          "brand" : {
            "type" : "string",
            "description" : "brand of the asset"
          },
          "colour" : {
            "type" : "string",
            "description" : "colour of the asset"
          }
        },
        "description" : "what kind of asset is this? Classify it, give the aspects. Most aspects are optional and should be used when applicable."
      },
      "CoverageProperties" : {
        "type" : "object",
        "properties" : {
          "products" : {
            "type" : "array",
            "description" : "List of products available",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "pricingRules" : {
            "type" : "array",
            "description" : "List of pricing plans available",
            "items" : {
              "$ref" : "#/components/schemas/PricingRules"
            }
          },
          "stops" : {
            "$ref" : "#/components/schemas/DRTStops"
          },
          "virtualStopsRequireStopsNearby" : {
            "type" : "boolean",
            "description" : "Whether virtual stops require public stops nearby or not"
          }
        }
      },
      "Customer" : {
        "required" : [ "email", "givenName", "id", "phone", "requirements", "surname" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier MaaS uses to identify the customer"
          },
          "givenName" : {
            "type" : "string",
            "description" : "customer given name"
          },
          "surname" : {
            "type" : "string",
            "description" : "customer surname"
          },
          "phone" : {
            "type" : "string",
            "description" : "customer phone"
          },
          "email" : {
            "type" : "string",
            "description" : "customer email"
          },
          "requirements" : {
            "$ref" : "#/components/schemas/Requirements"
          }
        },
        "description" : "The user that wants to make this booking"
      },
      "BookingOperationInput" : {
        "required" : [ "operation" ],
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "booking operation",
            "enum" : [ "CANCEL", "EXPIRE", "DENY", "COMMIT" ]
          }
        }
      },
      "PricingRules" : {
        "required" : [ "fare" ],
        "type" : "object",
        "properties" : {
          "planId" : {
            "type" : "string",
            "description" : "a unique identifier for this plan in the system"
          },
          "url" : {
            "type" : "string",
            "description" : "a fully qualified URL where the customer can learn more about this particular scheme"
          },
          "name" : {
            "type" : "string",
            "description" : "name of this pricing scheme"
          },
          "fare" : {
            "$ref" : "#/components/schemas/Fare"
          },
          "isTaxable" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string",
            "description" : "Text field describing the particular pricing plan in human readable terms."
          }
        },
        "description" : "List of pricing plans available"
      },
      "TimeEstimateList" : {
        "required" : [ "timeEstimates" ],
        "type" : "object",
        "properties" : {
          "timeEstimates" : {
            "type" : "array",
            "description" : "List of time estimates",
            "items" : {
              "$ref" : "#/components/schemas/TimeEstimate"
            }
          }
        }
      },
      "RGBColor" : {
        "required" : [ "blue", "green", "red" ],
        "type" : "object",
        "properties" : {
          "red" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "blue" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "green" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Product" : {
        "required" : [ "id", "planId", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "Human-friendly string to describe this product."
          },
          "id" : {
            "type" : "string",
            "description" : "unique id of the produce for this provider"
          },
          "bookingOption" : {
            "$ref" : "#/components/schemas/BookingOption"
          },
          "planId" : {
            "type" : "string",
            "description" : "pricing rules or plan identifier"
          }
        },
        "description" : "List of products available"
      },
      "Requirements" : {
        "type" : "object",
        "properties" : {
          "abilities" : {
            "type" : "array",
            "description" : "Requirements the users has ((dis)abilities, share [TRUE|FALSE], preferences [TBD])",
            "items" : {
              "$ref" : "#/components/schemas/Requirement"
            }
          }
        },
        "description" : "Requirements the users has"
      },
      "BookingOutput" : {
        "required" : [ "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the TO to know this booking by"
          },
          "state" : {
            "type" : "string",
            "description" : "Booking status",
            "enum" : [ "NEW", "PENDING", "REJECTED", "CONDITIONAL_CONFIRMED", "CONFIRMED", "CANCELLED", "STARTED", "FINISHED" ]
          }
        }
      },
      "TimeEstimate" : {
        "required" : [ "productId" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "string",
            "description" : "Product identifier"
          },
          "estimate" : {
            "type" : "integer",
            "description" : "ETA for the product (in seconds). Always show estimate in minutes",
            "format" : "int32"
          }
        },
        "description" : "List of time estimates"
      },
      "BookingRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the TO to know this booking by"
          },
          "from" : {
            "$ref" : "#/components/schemas/Location"
          },
          "to" : {
            "$ref" : "#/components/schemas/Location"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "pickupTime" : {
            "type" : "string",
            "description" : "ISO-8601 formatted date. Pick up time"
          },
          "note" : {
            "type" : "string",
            "description" : "Booking note"
          },
          "callbackUrl" : {
            "type" : "string",
            "description" : "base callback/webhook url to send updates to (see /bookings/{bookingID}/events and /legs/{legID}/events)"
          }
        }
      },
      "Endpoint" : {
        "required" : [ "name", "url" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Key identifying the type of endpoint this is",
            "enum" : [ "provider", "coverage", "estimatePrice", "estimateTime", "stationInformation", "stationStatus", "freeBikeStatus", "info", "bikeLanes", "createBooking", "updateBookingStatus", "getBooking" ]
          },
          "url" : {
            "type" : "string",
            "description" : "URL for the endpoint, it can be absolute or relative"
          }
        },
        "description" : "List of endpoints available"
      },
      "PriceEstimateList" : {
        "required" : [ "priceEstimates" ],
        "type" : "object",
        "properties" : {
          "priceEstimates" : {
            "type" : "array",
            "description" : "List of price estimates",
            "items" : {
              "$ref" : "#/components/schemas/PriceEstimate"
            }
          }
        }
      },
      "LegOperationInput" : {
        "required" : [ "event" ],
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "PREPARE", "SET_IN_USE", "PAUSE", "FINISH", "TIME_POSTPONE" ]
          },
          "event" : {
            "type" : "string",
            "description" : "event operation",
            "enum" : [ "PREPARE", "SET_IN_USE", "PAUSE", "FINISH", "TIME_POSTPONE" ]
          },
          "time" : {
            "type" : "string",
            "description" : "ISO-8601 formatted date. New pick up time"
          }
        }
      },
      "BookingRule" : {
        "type" : "object",
        "properties" : {
          "weekdays" : {
            "type" : "string",
            "description" : "weekdays following cron-like format. valid values are 'MON-TUE', 'WED', 'MON-SUN"
          },
          "prebooking" : {
            "$ref" : "#/components/schemas/PreBookingRule"
          },
          "workingHours" : {
            "type" : "array",
            "description" : "working hours, currently only supports hour scale type",
            "items" : {
              "$ref" : "#/components/schemas/Scale"
            }
          }
        }
      },
      "AccountInput" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "givenName" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          }
        }
      },
      "EndpointsConfig" : {
        "required" : [ "endpoints" ],
        "type" : "object",
        "properties" : {
          "endpoints" : {
            "type" : "array",
            "description" : "List of endpoints available",
            "items" : {
              "$ref" : "#/components/schemas/Endpoint"
            }
          }
        }
      },
      "ImageObject" : {
        "required" : [ "contentUrl" ],
        "type" : "object",
        "properties" : {
          "caption" : {
            "type" : "string",
            "description" : "The caption for this object"
          },
          "contentUrl" : {
            "type" : "string",
            "description" : "URL to download image, or image code for SkedGo icons"
          },
          "fileFormat" : {
            "type" : "string",
            "description" : "Media type of image, including remoteIcon and remoteDarkIcon for SkedGo"
          },
          "width" : {
            "type" : "integer",
            "description" : "Width in pixels",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "description" : "Height in pixels",
            "format" : "int32"
          }
        },
        "description" : "Image stored remotely"
      },
      "DRTStops" : {
        "required" : [ "features", "type" ],
        "type" : "object",
        "properties" : {
          "features" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DRTStop"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "FeatureCollection" ]
          }
        },
        "description" : "List of DRT stops, if available"
      },
      "DRTStopProperties" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "id of the stop"
          },
          "name" : {
            "type" : "string",
            "description" : "name of the stop"
          },
          "area_id" : {
            "type" : "string",
            "description" : "area id"
          }
        }
      },
      "Booking" : {
        "required" : [ "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the TO to know this booking by"
          },
          "state" : {
            "type" : "string",
            "description" : "Booking status",
            "enum" : [ "NEW", "PENDING", "REJECTED", "CONDITIONAL_CONFIRMED", "CONFIRMED", "CANCELLED", "STARTED", "FINISHED" ]
          },
          "from" : {
            "$ref" : "#/components/schemas/Location"
          },
          "to" : {
            "$ref" : "#/components/schemas/Location"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "legs" : {
            "type" : "array",
            "description" : "The legs of this booking, generally just one for simple legs, in order of how they will be travelled",
            "items" : {
              "$ref" : "#/components/schemas/Leg"
            }
          },
          "extraData" : {
            "$ref" : "#/components/schemas/ExtraData"
          }
        }
      },
      "Coverage" : {
        "required" : [ "features", "type" ],
        "type" : "object",
        "properties" : {
          "features" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CoverageArea"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "FeatureCollection" ]
          }
        }
      },
      "Scale" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "integer",
            "format" : "int32"
          },
          "to" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "KM", "MILE", "HOUR", "MINUTE", "WEEKDAY" ]
          },
          "proportional" : {
            "type" : "boolean"
          }
        }
      },
      "ExtraData" : {
        "type" : "object",
        "properties" : {
          "driverFirstName" : {
            "type" : "string",
            "description" : "Driver first name"
          }
        },
        "description" : "Arbitrary information that a TO can add"
      },
      "Point" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "the geometry type",
            "enum" : [ "Point", "POINT" ]
          },
          "coordinates" : {
            "type" : "array",
            "description" : "A single (X, Y) or (longitude, latitude) coordinate pair.",
            "items" : {
              "type" : "number",
              "description" : "A single (X, Y) or (longitude, latitude) coordinate pair.",
              "format" : "double"
            }
          }
        },
        "description" : "GeoJSON Point geometry"
      },
      "FarePart" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "name of this pricing part"
          },
          "amount" : {
            "type" : "number",
            "format" : "float"
          },
          "currencyCode" : {
            "type" : "string"
          },
          "taxRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "FIXED", "FLEX", "MAX", "MIN" ]
          },
          "unitType" : {
            "type" : "string",
            "enum" : [ "KM", "SECOND", "MINUTE", "HOUR", "MILE", "PERCENTAGE" ]
          },
          "units" : {
            "type" : "number",
            "description" : "the number of km, seconds etc in the `per` part. In the first example of the description this should be 2.0",
            "format" : "float"
          },
          "scales" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Scale"
            }
          }
        },
        "description" : "this describes a part of the fare (or discount).It contains a for instance the startup costs (fixed) or the flex part (e.g. 1.25 EUR per 2.0 MILES).The amount is tax included. In case of discounts, the values are negative.With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts.The `scale` properties create the ability to communicate scales(e.g. the first 4 kilometers you've to pay EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer)."
      },
      "Leg" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "$ref" : "#/components/schemas/Location"
          },
          "to" : {
            "$ref" : "#/components/schemas/Location"
          },
          "departureTime" : {
            "type" : "string",
            "description" : "The departure time of this leg"
          },
          "arrivalTime" : {
            "type" : "string",
            "description" : "The intended arrival time at the to place"
          },
          "assetType" : {
            "$ref" : "#/components/schemas/AssetType"
          }
        },
        "description" : "The legs of this booking, generally just one for simple legs, in order of how they will be travelled"
      },
      "Fare" : {
        "type" : "object",
        "properties" : {
          "estimated" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "bookingFee" : {
            "type" : "number",
            "description" : "Fee for booking in advance",
            "format" : "float"
          },
          "waitingMaxSpeed" : {
            "type" : "integer",
            "description" : "Wait time charged while the vehicle is stopped or slowed to less than X KM per hour",
            "format" : "int32"
          },
          "parts" : {
            "type" : "array",
            "description" : "this describes a part of the fare (or discount).It contains a for instance the startup costs (fixed) or the flex part (e.g. 1.25 EUR per 2.0 MILES).The amount is tax included. In case of discounts, the values are negative.With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts.The `scale` properties create the ability to communicate scales(e.g. the first 4 kilometers you've to pay EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).",
            "items" : {
              "$ref" : "#/components/schemas/FarePart"
            }
          }
        },
        "description" : "the total fare is the sum of all parts, except for the 'MAX' farePart. This one describes the maximum price for the complete leg.\nestimated: is this fare an estimation?"
      },
      "AppInfo" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "appURLiOS" : {
            "type" : "string"
          },
          "appURLAndroid" : {
            "type" : "string"
          },
          "deepLinkPattern" : {
            "type" : "string",
            "description" : "Will be used when booking is available, if we need need to add any of the enabled params.Deep link pattern, including the following placeholders between <>: fromLat, fromLng, fromAddress, toLat, toLng, toAddress, productId"
          },
          "deepLink" : {
            "type" : "string",
            "description" : "Will be user to open the app, any time, and also for bookings if deepLinkPattern is not present"
          }
        }
      },
      "Provider" : {
        "required" : [ "companyInfo", "modesEnabled" ],
        "type" : "object",
        "properties" : {
          "companyInfo" : {
            "$ref" : "#/components/schemas/CompanyInfo"
          },
          "modesEnabled" : {
            "type" : "array",
            "description" : "modes enabled for this provider",
            "items" : {
              "type" : "string",
              "description" : "modes enabled for this provider",
              "enum" : [ "pt_pub, ps_tax, ps_tnc, ps_shu, cy_bic-s, me_car-s, me_car-r, me_car-p" ]
            },
            "enum" : [ "pt_pub, ps_tax, ps_tnc, ps_shu, cy_bic-s, me_car-s, me_car-r, me_car-p" ]
          },
          "preferGenericMode" : {
            "type" : "boolean",
            "description" : "Whether is preferred to use the generic mode over the specific one",
            "default" : false
          },
          "defaultVehicleType" : {
            "$ref" : "#/components/schemas/ShareVehicleType"
          },
          "combined" : {
            "type" : "boolean",
            "description" : "Whether this provider is a combination of two (for Feonix)",
            "default" : false
          }
        }
      },
      "ShareVehicleType" : {
        "required" : [ "formFactor", "propulsionType" ],
        "type" : "object",
        "properties" : {
          "formFactor" : {
            "type" : "string",
            "description" : "The vehicle's general form factor following GBFS 2.1 standard",
            "enum" : [ "BICYCLE,CAR,MOPED,SCOOTER,OTHER" ]
          },
          "propulsionType" : {
            "type" : "string",
            "description" : "The primary propulsion type of the vehicle following GBFS 2.1 standard",
            "enum" : [ "HUMAN,ELECTRIC_ASSIST,ELECTRIC,COMBUSTION" ]
          }
        },
        "description" : "Default vehicle type, as fallback for the cases where there is no specific information available"
      },
      "LegOutput" : {
        "required" : [ "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the TO to know this leg by"
          },
          "state" : {
            "type" : "string",
            "description" : "Leg status",
            "enum" : [ "NOT_STARTED", "PREPARING", "IN_USE", "FINISHED", "ISSUE_REPORTED", "CANCELLED" ]
          }
        }
      },
      "Requirement" : {
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "type of requirement, see enum for details",
            "enum" : [ "HR", "HV", "AV", "AB", "AER", "K", "ZR", "RR" ]
          },
          "number" : {
            "type" : "integer",
            "description" : "amount of the requirement",
            "format" : "int32"
          }
        },
        "description" : "Requirements the users has ((dis)abilities, share [TRUE|FALSE], preferences [TBD])"
      },
      "AssetType" : {
        "type" : "object",
        "properties" : {
          "assetClass" : {
            "type" : "string",
            "description" : "These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.",
            "enum" : [ "AIR", "BUS", "TROLLEYBUS", "TRAM", "COACH", "RAIL", "INTERCITYRAIL", "URBANRAIL", "METRO", "WATER", "CABLEWAY", "FUNICULAR", "TAXI", "SELFDRIVE", "FOOT", "BICYCLE", "MOTORCYCLE", "CAR", "SHUTTLE", "OTHER", "PARKING", "MOPED", "STEP" ]
          },
          "assetSubClass" : {
            "type" : "string",
            "description" : "a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi', 'segway'. This is mandatory when using 'OTHER' as class."
          },
          "sharedProperties" : {
            "$ref" : "#/components/schemas/SharedProperties"
          }
        },
        "description" : "The asset type used in this leg as determined during booking"
      },
      "DRTStop" : {
        "required" : [ "geometry", "id", "properties", "type" ],
        "type" : "object",
        "properties" : {
          "geometry" : {
            "$ref" : "#/components/schemas/Point"
          },
          "id" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/DRTStopProperties"
          },
          "type" : {
            "type" : "string",
            "description" : "the feature type",
            "enum" : [ "Feature" ]
          }
        }
      },
      "MultiPolygon" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "the geometry type",
            "enum" : [ "MultiPolygon", "MULTIPOLYGON" ]
          },
          "coordinates" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number",
                    "format" : "double"
                  }
                }
              }
            }
          }
        },
        "description" : "GeoJSON MultiPolygon geometry"
      },
      "PriceEstimateInput" : {
        "required" : [ "origin" ],
        "type" : "object",
        "properties" : {
          "origin" : {
            "$ref" : "#/components/schemas/Location"
          },
          "destination" : {
            "$ref" : "#/components/schemas/Location"
          },
          "depart" : {
            "type" : "string",
            "description" : "ISO-8601 formatted date. Either this or `arrive` is required."
          },
          "arrive" : {
            "type" : "string",
            "description" : "ISO-8601 formatted date. Either this or `depart` is required. If this is provided, `destination` is required. "
          },
          "passengers" : {
            "type" : "integer",
            "description" : "Number of passengers",
            "format" : "int32"
          },
          "wheelchair" : {
            "type" : "boolean",
            "description" : "If a wheelchair-accessible vehicle is required"
          },
          "productId" : {
            "type" : "string",
            "description" : "ID of the product if quotes should be limited to that."
          }
        }
      },
      "CompanyInfo" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "website" : {
            "type" : "string"
          },
          "logos" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImageObject"
            }
          },
          "color" : {
            "$ref" : "#/components/schemas/RGBColor"
          },
          "appInfo" : {
            "$ref" : "#/components/schemas/AppInfo"
          }
        }
      },
      "PriceEstimate" : {
        "required" : [ "currency", "productId" ],
        "type" : "object",
        "properties" : {
          "productId" : {
            "type" : "string",
            "description" : "Product identifier"
          },
          "currency" : {
            "type" : "string",
            "description" : "Unambiguous currency identifier, e.g., \"EUR\" or \"USD\""
          },
          "estimate" : {
            "type" : "integer",
            "description" : "estimate in cents (at least one of the 3 price estimates must be present)",
            "format" : "int32"
          },
          "lowEstimate" : {
            "type" : "integer",
            "description" : "lower estimate in cents (at least one of the 3 price estimates must be present)",
            "format" : "int32"
          },
          "highEstimate" : {
            "type" : "integer",
            "description" : "higher estimate in cents (at least one of the 3 price estimates must be present)",
            "format" : "int32"
          },
          "duration" : {
            "type" : "integer",
            "description" : "estimate duration of the trip, in seconds",
            "format" : "int32"
          },
          "distance" : {
            "type" : "integer",
            "description" : "estimate distance of the trip, in metres",
            "format" : "int32"
          }
        },
        "description" : "List of price estimates"
      },
      "PreBookingRule" : {
        "type" : "object",
        "properties" : {
          "minHoursBefore" : {
            "type" : "integer",
            "description" : "minimum hours before booking time",
            "format" : "int32"
          },
          "minWeekdayBefore" : {
            "type" : "string",
            "description" : "minimum week day before booking time, goes along minTimeDayBefore"
          },
          "minTimeDayBefore" : {
            "type" : "integer",
            "description" : "minimum hour of the day before booking time, goes along with minWeekdayBefore",
            "format" : "int32"
          },
          "maxDaysBefore" : {
            "type" : "integer",
            "description" : "maximum days of pre booking",
            "format" : "int32"
          }
        },
        "description" : "pre booking rule"
      },
      "Location" : {
        "required" : [ "latitude", "longitude" ],
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "double"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double"
          },
          "address" : {
            "type" : "string"
          },
          "earthRadius" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "description" : "information about the destination"
      }
    }
  }
}